services:
  # PostgreSQL database for production
  postgres:
    image: postgres:15-alpine
    hostname: lihc-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lihc_platform}
      POSTGRES_USER: ${POSTGRES_USER:-lihc_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_THIS_PASSWORD_IN_PRODUCTION}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lihc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lihc_user -d lihc_platform"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    hostname: lihc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lihc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main API service
  lihc-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lihc-api
    ports:
      - "8050:8050"
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL:-postgresql://lihc_user:CHANGE_THIS_PASSWORD@postgres:5432/lihc_platform}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - SECRET_KEY=${SECRET_KEY:-CHANGE_THIS_SECRET_KEY_IN_PRODUCTION}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    command: python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8050 --workers 4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lihc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced dashboard with real-time features
  lihc-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lihc-dashboard
    ports:
      - "8051:8051"
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - API_BASE_URL=http://lihc-api:8050
      - REDIS_URL=redis://redis:6379/1
    command: python src/dashboard/enhanced_dashboard.py
    depends_on:
      - lihc-api
    networks:
      - lihc-network
    restart: unless-stopped

  # Background worker for analysis tasks (using deploy with no container_name)
  lihc-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://lihc_user:lihc_password@postgres:5432/lihc_platform
      - REDIS_URL=redis://redis:6379/0
      - WORKER_MODE=true
    command: python -m celery worker -A src.api.tasks:celery_app --loglevel=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lihc-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Celery beat scheduler for periodic tasks
  lihc-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lihc-scheduler
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://lihc_user:lihc_password@postgres:5432/lihc_platform
      - REDIS_URL=redis://redis:6379/0
    command: python -m celery beat -A src.api.tasks:celery_app --loglevel=info --schedule=/tmp/celerybeat-schedule
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lihc-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: lihc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - lihc-api
      - lihc-dashboard
    networks:
      - lihc-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: lihc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lihc-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: lihc-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - lihc-network
    restart: unless-stopped

  # Development services (only for development)
  lihc-dev:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: lihc-dev
    ports:
      - "8050:8050"
      - "8051:8051"
    volumes:
      - .:/app
      - /app/__pycache__
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://lihc_user:lihc_password@postgres:5432/lihc_platform
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    command: python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8050 --reload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lihc-network

  # Jupyter notebook for development
  jupyter:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: lihc-jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./results:/app/results
      - ./src:/app/src
    environment:
      - PYTHONPATH=/app
      - JUPYTER_ENABLE_LAB=yes
    command: >
      sh -c "pip install jupyterlab && 
             jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root 
             --NotebookApp.token='' --NotebookApp.password=''"
    networks:
      - lihc-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  lihc-network:
    driver: bridge