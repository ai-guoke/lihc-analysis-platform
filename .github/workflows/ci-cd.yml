# LIHC Multi-omics Analysis Platform CI/CD Pipeline

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_lihc
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-api.txt
        pip install pytest-xdist pytest-timeout
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_lihc
        REDIS_URL=redis://localhost:6379/0
        SECRET_KEY=test-secret-key
        JWT_SECRET_KEY=test-jwt-secret
        ENVIRONMENT=test
        DEBUG=false
        EOF
    
    - name: Run linting
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --timeout=300
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security checks
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Build and Test Docker Images
  docker:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build development image
      run: |
        docker build --target development -t lihc-platform:dev .
    
    - name: Build production image
      run: |
        docker build --target production -t lihc-platform:prod .
    
    - name: Test Docker Compose
      run: |
        cp .env.example .env
        docker-compose -f docker-compose.yml config
        docker-compose up -d --build
        sleep 30
        docker-compose ps
        docker-compose down

  # Integration Tests
  integration:
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        cp .env.example .env
        docker-compose up -d --build
        sleep 60
    
    - name: Wait for services
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:8050/health; do sleep 5; done'
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_api_comprehensive.py -v --timeout=600
    
    - name: Clean up
      run: |
        docker-compose down -v

  # Performance Testing
  performance:
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up environment
      run: |
        cp .env.example .env
        docker-compose up -d --build
        sleep 60
    
    - name: Run load tests
      run: |
        python tests/load_testing.py
    
    - name: Clean up
      run: |
        docker-compose down -v

  # Deployment to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  # Deployment to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security, docker, performance]
    if: github.event_name == 'release'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
    
    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment verification..."
        # Add verification commands here
    
    - name: Notify deployment
      run: |
        echo "Notifying team of successful deployment..."
        # Add notification commands here

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [test, security, docker, integration]
    steps:
    - name: Clean up artifacts
      run: |
        echo "Cleaning up temporary artifacts..."